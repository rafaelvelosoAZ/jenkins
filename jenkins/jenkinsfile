pipeline{
    agent any 
     environment {
        TF_IN_AUTOMATION = "true"
        // KEYVAULT_URL = credentials('azure_keyvault_url') # keyVaultURL not able to be dereferenced with ${env.KEYVAULT_URL}, keeping for future reference
    }
    parameters {
        string(name: 'AZURE_KEYVAULT_URL', defaultValue: 'https://mvpnconfrafvs.vault.azure.net/')
    }

    stages {
    
        stage('Terraform Init'){
            
            options {
              azureKeyVault(
                credentialID: "azure_service_principal",
                keyVaultURL: "${params.AZURE_KEYVAULT_URL}",
                secrets: [
                    [envVariable: 'TF_BACKEND_STORAGE_ACCOUNT', name: 'TF-BACKEND-STORAGE-ACCOUNT', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_CONTAINER', name: 'TF-BACKEND-CONTAINER', secretType: 'Secret'],
                    [envVariable: 'TF_TF_BACKEND_KEY', name: 'TF-BACKEND-KEY', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_RESOURCE_GROUP', name: 'TF-BACKEND-RESOURCE-GROUP', secretType: 'Secret']
                ]
              )
            }

            steps {
                    ansiColor('xterm') {
                    withCredentials([azureServicePrincipal(
                    credentialsId: 'azure_service_principal',
                    subscriptionIdVariable: 'ARM-SUBSCRIPTION-ID',
                    clientIdVariable: 'ARM-CLIENT-ID',
                    clientSecretVariable: 'ARM-CLIENT-SECRET',
                    tenantIdVariable: '	ARM-TENANT-ID'
                )]) {
                        dir("terraform/contoso") {
                        sh """
                        echo "Initialising Terraform"
                        cd ../terraform/contoso
                        terraform init -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=$TF_BACKEND_CONTAINER" -backend-config="key=$TF_BACKEND_KEY" -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP"
                        """
                        }
                     }
                }
             }
        }

        // stage('Terraform Plan'){
            
        //     options {
        //       azureKeyVault(
        //         credentialID: "azure_service_principal",
        //         keyVaultURL: "${params.AZURE_KEYVAULT_URL}",
        //         secrets: [
        //             [envVariable: 'TF_BACKEND_STORAGE_ACCOUNT', name: 'BACKEND-STORAGE-ACCOUNT-NAME', secretType: 'Secret'],
        //             [envVariable: 'TF_BACKEND_CONTAINER', name: 'BACKEND-STORAGE-ACCOUNT-CONTAINER-NAME', secretType: 'Secret'],
        //             [envVariable: 'TF_BACKEND_KEY', name: 'BACKEND-KEY', secretType: 'Secret'],
        //             [envVariable: 'TF_BACKEND_RESOURCE_GROUP', name: 'RG-NAME', secretType: 'Secret'],
        //             [envVariable: 'ARM_ACCESS_KEY', name: 'BACKEND-ACCESS-KEY', secretType: 'Secret'],
        //             [envVariable: 'EGVB_APP_SERVICE_NAME', name: 'EGVB-APP-SERVICE-NAME', secretType: 'Secret'],
        //             [envVariable: 'EGVB_APP_SERVICE_PLAN_NAME', name: 'EGVB-APP-SERVICE-PLAN-NAME', secretType: 'Secret'],
        //             [envVariable: 'LOCATION', name: 'LOCATION', secretType: 'Secret']
        //         ]
        //       )
        //     }

        //     steps {
        //             ansiColor('xterm') {
        //             withCredentials([azureServicePrincipal(
        //             credentialsId: 'azure_service_principal',
        //             subscriptionIdVariable: 'ARM_SUBSCRIPTION_ID',
        //             clientIdVariable: 'ARM_CLIENT_ID',
        //             clientSecretVariable: 'ARM_CLIENT_SECRET',
        //             tenantIdVariable: 'ARM_TENANT_ID'
        //         )]) {
        //                 dir("src") {
        //                 sh """
        //                 echo "Creating Terraform Plan"
        //                 terraform plan -var "resource_group_name=$TF_BACKEND_RESOURCE_GROUP" -var "resource_group_region=$LOCATION" -var "web_app_name=$EGVB_APP_SERVICE_NAME" -var "app_service_plan_name=$EGVB_APP_SERVICE_PLAN_NAME"
        //                 """
        //                 }
        //              }
        //         }
        //      }
        // } 

        // stage('Waiting for Approval'){
        //     steps {
        //         timeout(time: 10, unit: 'MINUTES') {
        //             input (message: "Deploy the infrastructure?")
        //         }
        //     }
        // }

        // stage('Terraform Apply'){
            
        //     options {
        //       azureKeyVault(
        //         credentialID: "azure_service_principal",
        //         keyVaultURL: "${params.AZURE_KEYVAULT_URL}",
        //         secrets: [
        //             [envVariable: 'TF_BACKEND_STORAGE_ACCOUNT', name: 'BACKEND-STORAGE-ACCOUNT-NAME', secretType: 'Secret'],
        //             [envVariable: 'TF_BACKEND_CONTAINER', name: 'BACKEND-STORAGE-ACCOUNT-CONTAINER-NAME', secretType: 'Secret'],
        //             [envVariable: 'TF_BACKEND_KEY', name: 'BACKEND-KEY', secretType: 'Secret'],
        //             [envVariable: 'TF_BACKEND_RESOURCE_GROUP', name: 'RG-NAME', secretType: 'Secret'],
        //             [envVariable: 'ARM_ACCESS_KEY', name: 'BACKEND-ACCESS-KEY', secretType: 'Secret'],
        //             [envVariable: 'EGVB_APP_SERVICE_NAME', name: 'EGVB-APP-SERVICE-NAME', secretType: 'Secret'],
        //             [envVariable: 'EGVB_APP_SERVICE_PLAN_NAME', name: 'EGVB-APP-SERVICE-PLAN-NAME', secretType: 'Secret'],
        //             [envVariable: 'LOCATION', name: 'LOCATION', secretType: 'Secret']
        //         ]
        //       )
        //     }

        //     steps {
        //             ansiColor('xterm') {
        //             withCredentials([azureServicePrincipal(
        //             credentialsId: 'azure_service_principal',
        //             subscriptionIdVariable: 'ARM_SUBSCRIPTION_ID',
        //             clientIdVariable: 'ARM_CLIENT_ID',
        //             clientSecretVariable: 'ARM_CLIENT_SECRET',
        //             tenantIdVariable: 'ARM_TENANT_ID'
        //         )]) {
        //                 dir("src") {
        //                 sh """
        //                 echo "Applying the plan"
        //                 terraform apply -auto-approve -var "resource_group_name=$TF_BACKEND_RESOURCE_GROUP" -var "resource_group_region=$LOCATION" -var "web_app_name=$EGVB_APP_SERVICE_NAME" -var "app_service_plan_name=$EGVB_APP_SERVICE_PLAN_NAME"
        //                 """
        //                 }
        //              }
        //         }
        //      }
        // }
    }
}
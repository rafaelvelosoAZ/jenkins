pipeline{
    agent any 
     environment {
        TF_HOME = tool ('Terraform')
        PATH = "$TF_HOME:$PATH"
        // KEYVAULT_URL = credentials('azure_keyvault_url') # keyVaultURL not able to be dereferenced with ${env.KEYVAULT_URL}, keeping for future reference
    }
    parameters {
        string(name: 'AZURE_KEYVAULT_URL', defaultValue: 'https://mvpnconfrafvs.vault.azure.net/')
    }

    stages {
    
        stage('Terraform Init'){
            
            options {
              azureKeyVault(
                credentialID: "azure_service_principal",
                keyVaultURL: "https://mvpnconfrafvs.vault.azure.net/",
                secrets: [
                    [envVariable: 'TF_BACKEND_STORAGE_ACCOUNT', name: 'TF-BACKEND-STORAGE-ACCOUNT', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_CONTAINER', name: 'TF-BACKEND-CONTAINER', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_KEY', name: 'TF-BACKEND-KEY', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_RESOURCE_GROUP', name: 'TF-BACKEND-RESOURCE-GROUP', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_ID', name: 'ARM-CLIENT-ID', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_SECRET', name: 'ARM-CLIENT-SECRET', secretType: 'Secret'],
                    [envVariable: 'ARM_TENANT_ID', name: 'ARM-TENANT-ID', secretType: 'Secret'],
                    [envVariable: 'ARM_SUBSCRIPTION_ID', name: 'ARM-SUBSCRIPTION-ID', secretType: 'Secret']
                ]
              )
            }

            steps {
                    ansiColor('xterm') {
                    withCredentials([azureServicePrincipal(
                    credentialsId: 'azure_service_principal',
                    subscriptionIdVariable: 'ARM-SUBSCRIPTION-ID',
                    clientIdVariable: 'ARM-CLIENT-ID',
                    clientSecretVariable: 'ARM-CLIENT-SECRET',
                    tenantIdVariable: 'ARM-TENANT-ID'
                )]) {
                        dir("terraform/contoso") {
                        sh """
                        echo "Initialising Terraform"
                        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET -t $ARM_TENANT_ID
                        terraform init -reconfigure -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=$TF_BACKEND_CONTAINER" -backend-config="key=$TF_BACKEND_KEY" -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP"
                        """
                        }
                     }
                }
             }
        }

        stage('Terraform Plan'){
            
            options {
              azureKeyVault(
                credentialID: "azure_service_principal",
                keyVaultURL: "https://mvpnconfrafvs.vault.azure.net/",
                secrets: [
                    [envVariable: 'TF_BACKEND_STORAGE_ACCOUNT', name: 'TF-BACKEND-STORAGE-ACCOUNT', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_CONTAINER', name: 'TF-BACKEND-CONTAINER', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_KEY', name: 'TF-BACKEND-KEY', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_RESOURCE_GROUP', name: 'TF-BACKEND-RESOURCE-GROUP', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_ID', name: 'ARM-CLIENT-ID', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_SECRET', name: 'ARM-CLIENT-SECRET', secretType: 'Secret'],
                    [envVariable: 'ARM_TENANT_ID', name: 'ARM-TENANT-ID', secretType: 'Secret'],
                    [envVariable: 'ARM_SUBSCRIPTION_ID', name: 'ARM-SUBSCRIPTION-ID', secretType: 'Secret']
                ]
              )
            }

            steps {
                    ansiColor('xterm') {
                    withCredentials([azureServicePrincipal(
                    credentialsId: 'azure_service_principal',
                    subscriptionIdVariable: 'ARM-SUBSCRIPTION-ID',
                    clientIdVariable: 'ARM-CLIENT-ID',
                    clientSecretVariable: 'ARM-CLIENT-SECRET',
                    tenantIdVariable: 'ARM-TENANT-ID'
                )]) {
                        dir("terraform/contoso") {
                        sh """
                        echo "Terraform Plan"
                        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET -t $ARM_TENANT_ID
                        terraform init -reconfigure -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=$TF_BACKEND_CONTAINER" -backend-config="key=$TF_BACKEND_KEY" -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP"
                        terraform plan -var-file=env/dev.tfvars
                        """
                        }
                     }
                }
             }
        }

        stage('Terraform Apply'){
            
            options {
              azureKeyVault(
                credentialID: "azure_service_principal",
                keyVaultURL: "https://mvpnconfrafvs.vault.azure.net/",
                secrets: [
                    [envVariable: 'TF_BACKEND_STORAGE_ACCOUNT', name: 'TF-BACKEND-STORAGE-ACCOUNT', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_CONTAINER', name: 'TF-BACKEND-CONTAINER', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_KEY', name: 'TF-BACKEND-KEY', secretType: 'Secret'],
                    [envVariable: 'TF_BACKEND_RESOURCE_GROUP', name: 'TF-BACKEND-RESOURCE-GROUP', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_ID', name: 'ARM-CLIENT-ID', secretType: 'Secret'],
                    [envVariable: 'ARM_CLIENT_SECRET', name: 'ARM-CLIENT-SECRET', secretType: 'Secret'],
                    [envVariable: 'ARM_TENANT_ID', name: 'ARM-TENANT-ID', secretType: 'Secret'],
                    [envVariable: 'ARM_SUBSCRIPTION_ID', name: 'ARM-SUBSCRIPTION-ID', secretType: 'Secret']
                ]
              )
            }

            steps {
                    ansiColor('xterm') {
                    withCredentials([azureServicePrincipal(
                    credentialsId: 'azure_service_principal',
                    subscriptionIdVariable: 'ARM-SUBSCRIPTION-ID',
                    clientIdVariable: 'ARM-CLIENT-ID',
                    clientSecretVariable: 'ARM-CLIENT-SECRET',
                    tenantIdVariable: 'ARM-TENANT-ID'
                )]) {
                        dir("terraform/contoso") {
                        sh """
                        echo "Apply"
                        az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET -t $ARM_TENANT_ID
                        terraform init -reconfigure -backend-config="storage_account_name=$TF_BACKEND_STORAGE_ACCOUNT" -backend-config="container_name=$TF_BACKEND_CONTAINER" -backend-config="key=$TF_BACKEND_KEY" -backend-config="resource_group_name=$TF_BACKEND_RESOURCE_GROUP"
                        terraform apply -auto-approve -var-file=env/dev.tfvars
                        """
                        }
                     }
                }
             }
        }

     }
}